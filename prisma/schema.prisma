// ---------- existing ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- NEW / UPDATED MODELS ----------

// Users created by OAuth or your own Credentials flow
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?

  // For Credentials (email+password). Null for users who only use OAuth.
  password      String?

  // Ownership: one user can own many workspaces
  workspaces    Workspace[]

  // Auth.js relations
  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  // new fields Auth.js v5 sometimes writes:
  oauth_token_secret String? @db.Text
  oauth_token         String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------- YOUR EXISTING DOMAIN MODELS (with a small addition) ----------

model Workspace {
  id          Int          @id @default(autoincrement())
  name        String
  collections Collection[]
  createdAt   DateTime     @default(now())

  // NEW: owner relation to User
  ownerId     String?
  owner       User?        @relation(fields: [ownerId], references: [id], onDelete: SetNull)
}

model Collection {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  snippets    Snippet[]
  createdAt   DateTime  @default(now())
}

model Snippet {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  code         String
  language     String
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id])

  tags Tag[] @relation("SnippetTags")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  snippets Snippet[] @relation("SnippetTags")
}
